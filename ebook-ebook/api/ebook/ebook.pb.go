// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ebook.proto

package ebook

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EbookName            string   `protobuf:"bytes,2,opt,name=ebook_name,json=ebookName,proto3" json:"ebook_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,3,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,4,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             string   `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	PublishDate          string   `protobuf:"bytes,6,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	KeyWords             string   `protobuf:"bytes,7,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	PreviewType          string   `protobuf:"bytes,8,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`
	PreviewSize          int64    `protobuf:"varint,9,opt,name=preview_size,json=previewSize,proto3" json:"preview_size,omitempty"`
	PreviewDir           string   `protobuf:"bytes,10,opt,name=preview_dir,json=previewDir,proto3" json:"preview_dir,omitempty"`
	PreviewUploadName    string   `protobuf:"bytes,11,opt,name=preview_upload_name,json=previewUploadName,proto3" json:"preview_upload_name,omitempty"`
	PreviewHashValue     string   `protobuf:"bytes,12,opt,name=preview_hash_value,json=previewHashValue,proto3" json:"preview_hash_value,omitempty"`
	EbookType            string   `protobuf:"bytes,13,opt,name=ebook_type,json=ebookType,proto3" json:"ebook_type,omitempty"`
	EbookSize            int64    `protobuf:"varint,14,opt,name=ebook_size,json=ebookSize,proto3" json:"ebook_size,omitempty"`
	EbookDir             string   `protobuf:"bytes,15,opt,name=ebook_dir,json=ebookDir,proto3" json:"ebook_dir,omitempty"`
	EbookUploadName      string   `protobuf:"bytes,16,opt,name=ebook_upload_name,json=ebookUploadName,proto3" json:"ebook_upload_name,omitempty"`
	EbookHashValue       string   `protobuf:"bytes,17,opt,name=ebook_hash_value,json=ebookHashValue,proto3" json:"ebook_hash_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{0}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AddRequest) GetEbookName() string {
	if m != nil {
		return m.EbookName
	}
	return ""
}

func (m *AddRequest) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *AddRequest) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *AddRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *AddRequest) GetPublishDate() string {
	if m != nil {
		return m.PublishDate
	}
	return ""
}

func (m *AddRequest) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *AddRequest) GetPreviewType() string {
	if m != nil {
		return m.PreviewType
	}
	return ""
}

func (m *AddRequest) GetPreviewSize() int64 {
	if m != nil {
		return m.PreviewSize
	}
	return 0
}

func (m *AddRequest) GetPreviewDir() string {
	if m != nil {
		return m.PreviewDir
	}
	return ""
}

func (m *AddRequest) GetPreviewUploadName() string {
	if m != nil {
		return m.PreviewUploadName
	}
	return ""
}

func (m *AddRequest) GetPreviewHashValue() string {
	if m != nil {
		return m.PreviewHashValue
	}
	return ""
}

func (m *AddRequest) GetEbookType() string {
	if m != nil {
		return m.EbookType
	}
	return ""
}

func (m *AddRequest) GetEbookSize() int64 {
	if m != nil {
		return m.EbookSize
	}
	return 0
}

func (m *AddRequest) GetEbookDir() string {
	if m != nil {
		return m.EbookDir
	}
	return ""
}

func (m *AddRequest) GetEbookUploadName() string {
	if m != nil {
		return m.EbookUploadName
	}
	return ""
}

func (m *AddRequest) GetEbookHashValue() string {
	if m != nil {
		return m.EbookHashValue
	}
	return ""
}

type AddResponse struct {
	Errno                int64              `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string             `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 *EbookResponseInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AddResponse) Reset()         { *m = AddResponse{} }
func (m *AddResponse) String() string { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()    {}
func (*AddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{1}
}
func (m *AddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResponse.Merge(m, src)
}
func (m *AddResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddResponse proto.InternalMessageInfo

func (m *AddResponse) GetErrno() int64 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *AddResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *AddResponse) GetData() *EbookResponseInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{2}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteResponse struct {
	Errno                int64    `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{3}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetErrno() int64 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *DeleteResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DeleteResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type UpdateRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EbookName            string   `protobuf:"bytes,3,opt,name=ebook_name,json=ebookName,proto3" json:"ebook_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,4,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,5,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             string   `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	PublishDate          string   `protobuf:"bytes,7,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	KeyWords             string   `protobuf:"bytes,8,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	PreviewType          string   `protobuf:"bytes,9,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`
	PreviewSize          int64    `protobuf:"varint,10,opt,name=preview_size,json=previewSize,proto3" json:"preview_size,omitempty"`
	PreviewDir           string   `protobuf:"bytes,11,opt,name=preview_dir,json=previewDir,proto3" json:"preview_dir,omitempty"`
	PreviewUploadName    string   `protobuf:"bytes,12,opt,name=preview_upload_name,json=previewUploadName,proto3" json:"preview_upload_name,omitempty"`
	PreviewHashValue     string   `protobuf:"bytes,13,opt,name=preview_hash_value,json=previewHashValue,proto3" json:"preview_hash_value,omitempty"`
	EbookType            string   `protobuf:"bytes,14,opt,name=ebook_type,json=ebookType,proto3" json:"ebook_type,omitempty"`
	EbookSize            int64    `protobuf:"varint,15,opt,name=ebook_size,json=ebookSize,proto3" json:"ebook_size,omitempty"`
	EbookDir             string   `protobuf:"bytes,16,opt,name=ebook_dir,json=ebookDir,proto3" json:"ebook_dir,omitempty"`
	EbookUploadName      string   `protobuf:"bytes,17,opt,name=ebook_upload_name,json=ebookUploadName,proto3" json:"ebook_upload_name,omitempty"`
	EbookHashValue       string   `protobuf:"bytes,18,opt,name=ebook_hash_value,json=ebookHashValue,proto3" json:"ebook_hash_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{4}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateRequest) GetEbookName() string {
	if m != nil {
		return m.EbookName
	}
	return ""
}

func (m *UpdateRequest) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *UpdateRequest) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *UpdateRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *UpdateRequest) GetPublishDate() string {
	if m != nil {
		return m.PublishDate
	}
	return ""
}

func (m *UpdateRequest) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *UpdateRequest) GetPreviewType() string {
	if m != nil {
		return m.PreviewType
	}
	return ""
}

func (m *UpdateRequest) GetPreviewSize() int64 {
	if m != nil {
		return m.PreviewSize
	}
	return 0
}

func (m *UpdateRequest) GetPreviewDir() string {
	if m != nil {
		return m.PreviewDir
	}
	return ""
}

func (m *UpdateRequest) GetPreviewUploadName() string {
	if m != nil {
		return m.PreviewUploadName
	}
	return ""
}

func (m *UpdateRequest) GetPreviewHashValue() string {
	if m != nil {
		return m.PreviewHashValue
	}
	return ""
}

func (m *UpdateRequest) GetEbookType() string {
	if m != nil {
		return m.EbookType
	}
	return ""
}

func (m *UpdateRequest) GetEbookSize() int64 {
	if m != nil {
		return m.EbookSize
	}
	return 0
}

func (m *UpdateRequest) GetEbookDir() string {
	if m != nil {
		return m.EbookDir
	}
	return ""
}

func (m *UpdateRequest) GetEbookUploadName() string {
	if m != nil {
		return m.EbookUploadName
	}
	return ""
}

func (m *UpdateRequest) GetEbookHashValue() string {
	if m != nil {
		return m.EbookHashValue
	}
	return ""
}

type UpdateResponse struct {
	Errno                int64    `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{5}
}
func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetErrno() int64 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *UpdateResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UpdateResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type GetRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{6}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetResponse struct {
	Errno                int64              `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string             `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 *EbookResponseInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{7}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetErrno() int64 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *GetResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetResponse) GetData() *EbookResponseInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetsRequest struct {
	Ids                  []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EbookName            string   `protobuf:"bytes,3,opt,name=ebook_name,json=ebookName,proto3" json:"ebook_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,4,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,5,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             string   `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	PublishDate          string   `protobuf:"bytes,7,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	KeyWords             string   `protobuf:"bytes,8,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	PreviewType          string   `protobuf:"bytes,9,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`
	PreviewSize          int64    `protobuf:"varint,10,opt,name=preview_size,json=previewSize,proto3" json:"preview_size,omitempty"`
	PreviewUploadName    string   `protobuf:"bytes,11,opt,name=preview_upload_name,json=previewUploadName,proto3" json:"preview_upload_name,omitempty"`
	EbookType            string   `protobuf:"bytes,12,opt,name=ebook_type,json=ebookType,proto3" json:"ebook_type,omitempty"`
	EbookSize            int64    `protobuf:"varint,13,opt,name=ebook_size,json=ebookSize,proto3" json:"ebook_size,omitempty"`
	EbookUploadName      string   `protobuf:"bytes,14,opt,name=ebook_upload_name,json=ebookUploadName,proto3" json:"ebook_upload_name,omitempty"`
	IsDelete             uint64   `protobuf:"varint,15,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	CreateTime           string   `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           string   `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetsRequest) Reset()         { *m = GetsRequest{} }
func (m *GetsRequest) String() string { return proto.CompactTextString(m) }
func (*GetsRequest) ProtoMessage()    {}
func (*GetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{8}
}
func (m *GetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetsRequest.Merge(m, src)
}
func (m *GetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetsRequest proto.InternalMessageInfo

func (m *GetsRequest) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetsRequest) GetEbookName() string {
	if m != nil {
		return m.EbookName
	}
	return ""
}

func (m *GetsRequest) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *GetsRequest) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *GetsRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *GetsRequest) GetPublishDate() string {
	if m != nil {
		return m.PublishDate
	}
	return ""
}

func (m *GetsRequest) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *GetsRequest) GetPreviewType() string {
	if m != nil {
		return m.PreviewType
	}
	return ""
}

func (m *GetsRequest) GetPreviewSize() int64 {
	if m != nil {
		return m.PreviewSize
	}
	return 0
}

func (m *GetsRequest) GetPreviewUploadName() string {
	if m != nil {
		return m.PreviewUploadName
	}
	return ""
}

func (m *GetsRequest) GetEbookType() string {
	if m != nil {
		return m.EbookType
	}
	return ""
}

func (m *GetsRequest) GetEbookSize() int64 {
	if m != nil {
		return m.EbookSize
	}
	return 0
}

func (m *GetsRequest) GetEbookUploadName() string {
	if m != nil {
		return m.EbookUploadName
	}
	return ""
}

func (m *GetsRequest) GetIsDelete() uint64 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *GetsRequest) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *GetsRequest) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type GetsResponse struct {
	Errno                int64                `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               string               `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 []*EbookResponseInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetsResponse) Reset()         { *m = GetsResponse{} }
func (m *GetsResponse) String() string { return proto.CompactTextString(m) }
func (*GetsResponse) ProtoMessage()    {}
func (*GetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{9}
}
func (m *GetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetsResponse.Merge(m, src)
}
func (m *GetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetsResponse proto.InternalMessageInfo

func (m *GetsResponse) GetErrno() int64 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *GetsResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetsResponse) GetData() []*EbookResponseInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type EbookResponseInfo struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EbookName            string   `protobuf:"bytes,3,opt,name=ebook_name,json=ebookName,proto3" json:"ebook_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,4,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,5,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             string   `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	PublishDate          string   `protobuf:"bytes,7,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	KeyWords             string   `protobuf:"bytes,8,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	PreviewType          string   `protobuf:"bytes,9,opt,name=preview_type,json=previewType,proto3" json:"preview_type,omitempty"`
	PreviewSize          int64    `protobuf:"varint,10,opt,name=preview_size,json=previewSize,proto3" json:"preview_size,omitempty"`
	PreviewDir           string   `protobuf:"bytes,11,opt,name=preview_dir,json=previewDir,proto3" json:"preview_dir,omitempty"`
	PreviewUploadName    string   `protobuf:"bytes,12,opt,name=preview_upload_name,json=previewUploadName,proto3" json:"preview_upload_name,omitempty"`
	PreviewHashValue     string   `protobuf:"bytes,13,opt,name=preview_hash_value,json=previewHashValue,proto3" json:"preview_hash_value,omitempty"`
	EbookType            string   `protobuf:"bytes,14,opt,name=ebook_type,json=ebookType,proto3" json:"ebook_type,omitempty"`
	EbookSize            int64    `protobuf:"varint,15,opt,name=ebook_size,json=ebookSize,proto3" json:"ebook_size,omitempty"`
	EbookDir             string   `protobuf:"bytes,16,opt,name=ebook_dir,json=ebookDir,proto3" json:"ebook_dir,omitempty"`
	EbookUploadName      string   `protobuf:"bytes,17,opt,name=ebook_upload_name,json=ebookUploadName,proto3" json:"ebook_upload_name,omitempty"`
	EbookHashValue       string   `protobuf:"bytes,18,opt,name=ebook_hash_value,json=ebookHashValue,proto3" json:"ebook_hash_value,omitempty"`
	IsDelete             uint64   `protobuf:"varint,19,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	CreateTime           string   `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           string   `protobuf:"bytes,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EbookResponseInfo) Reset()         { *m = EbookResponseInfo{} }
func (m *EbookResponseInfo) String() string { return proto.CompactTextString(m) }
func (*EbookResponseInfo) ProtoMessage()    {}
func (*EbookResponseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{10}
}
func (m *EbookResponseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EbookResponseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EbookResponseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EbookResponseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EbookResponseInfo.Merge(m, src)
}
func (m *EbookResponseInfo) XXX_Size() int {
	return m.Size()
}
func (m *EbookResponseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EbookResponseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EbookResponseInfo proto.InternalMessageInfo

func (m *EbookResponseInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EbookResponseInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EbookResponseInfo) GetEbookName() string {
	if m != nil {
		return m.EbookName
	}
	return ""
}

func (m *EbookResponseInfo) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *EbookResponseInfo) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *EbookResponseInfo) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *EbookResponseInfo) GetPublishDate() string {
	if m != nil {
		return m.PublishDate
	}
	return ""
}

func (m *EbookResponseInfo) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *EbookResponseInfo) GetPreviewType() string {
	if m != nil {
		return m.PreviewType
	}
	return ""
}

func (m *EbookResponseInfo) GetPreviewSize() int64 {
	if m != nil {
		return m.PreviewSize
	}
	return 0
}

func (m *EbookResponseInfo) GetPreviewDir() string {
	if m != nil {
		return m.PreviewDir
	}
	return ""
}

func (m *EbookResponseInfo) GetPreviewUploadName() string {
	if m != nil {
		return m.PreviewUploadName
	}
	return ""
}

func (m *EbookResponseInfo) GetPreviewHashValue() string {
	if m != nil {
		return m.PreviewHashValue
	}
	return ""
}

func (m *EbookResponseInfo) GetEbookType() string {
	if m != nil {
		return m.EbookType
	}
	return ""
}

func (m *EbookResponseInfo) GetEbookSize() int64 {
	if m != nil {
		return m.EbookSize
	}
	return 0
}

func (m *EbookResponseInfo) GetEbookDir() string {
	if m != nil {
		return m.EbookDir
	}
	return ""
}

func (m *EbookResponseInfo) GetEbookUploadName() string {
	if m != nil {
		return m.EbookUploadName
	}
	return ""
}

func (m *EbookResponseInfo) GetEbookHashValue() string {
	if m != nil {
		return m.EbookHashValue
	}
	return ""
}

func (m *EbookResponseInfo) GetIsDelete() uint64 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *EbookResponseInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *EbookResponseInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "ebook.api.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "ebook.api.AddResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ebook.api.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "ebook.api.DeleteResponse")
	proto.RegisterType((*UpdateRequest)(nil), "ebook.api.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "ebook.api.UpdateResponse")
	proto.RegisterType((*GetRequest)(nil), "ebook.api.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ebook.api.GetResponse")
	proto.RegisterType((*GetsRequest)(nil), "ebook.api.GetsRequest")
	proto.RegisterType((*GetsResponse)(nil), "ebook.api.GetsResponse")
	proto.RegisterType((*EbookResponseInfo)(nil), "ebook.api.EbookResponseInfo")
}

func init() { proto.RegisterFile("ebook.proto", fileDescriptor_790c7c483a0ad50b) }

var fileDescriptor_790c7c483a0ad50b = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcd, 0x6e, 0xda, 0x5a,
	0x10, 0xc7, 0x01, 0x1b, 0x02, 0xc3, 0x47, 0xe0, 0xe4, 0xcb, 0x97, 0xdc, 0x90, 0x5c, 0xaf, 0xd0,
	0x55, 0x85, 0xaa, 0x54, 0xad, 0xd4, 0x55, 0x95, 0x2a, 0x55, 0x9a, 0x4d, 0x17, 0x6e, 0xd2, 0x4a,
	0xdd, 0x58, 0x4e, 0x3c, 0x0d, 0x47, 0x01, 0xec, 0xfa, 0x98, 0x44, 0xe4, 0x49, 0xfa, 0x20, 0x79,
	0x88, 0xae, 0xaa, 0x2e, 0xbb, 0xac, 0xd2, 0x65, 0x5f, 0xa2, 0xf2, 0x1c, 0x9b, 0xd8, 0x84, 0x62,
	0xd2, 0xaf, 0x55, 0x76, 0xcc, 0xcc, 0xff, 0x8c, 0xc7, 0xf0, 0xff, 0x79, 0x30, 0x94, 0xf1, 0xc8,
	0x71, 0x4e, 0x3b, 0xae, 0xe7, 0xf8, 0x0e, 0x2b, 0xc9, 0xc0, 0x72, 0xb9, 0xfe, 0x59, 0x05, 0xd8,
	0xb1, 0x6d, 0x03, 0xdf, 0x0d, 0x51, 0xf8, 0x6c, 0x0d, 0x16, 0x86, 0x02, 0x3d, 0x93, 0xdb, 0x5a,
	0x76, 0x2b, 0xdb, 0x2e, 0x19, 0x85, 0x20, 0xdc, 0xb7, 0xd9, 0x06, 0x00, 0x1d, 0x32, 0x07, 0x56,
	0x1f, 0xb5, 0x1c, 0xd5, 0x64, 0x9b, 0x17, 0x56, 0x1f, 0xd9, 0x7f, 0x50, 0xc1, 0xc1, 0x49, 0x8f,
	0x8b, 0xae, 0x14, 0x28, 0x24, 0x28, 0x87, 0x39, 0x92, 0x6c, 0x00, 0x58, 0x3d, 0x6e, 0x09, 0x29,
	0x50, 0x65, 0x07, 0xca, 0x50, 0xb9, 0x09, 0xc5, 0x63, 0xcb, 0xc7, 0x13, 0xc7, 0x1b, 0x69, 0x79,
	0x2a, 0x8e, 0xe3, 0xa0, 0xbb, 0x3b, 0x3c, 0xa2, 0xee, 0xb6, 0xe5, 0xa3, 0x56, 0x90, 0xdd, 0xc3,
	0xdc, 0xae, 0xe5, 0x23, 0x5b, 0x87, 0xd2, 0x29, 0x8e, 0xcc, 0x73, 0xc7, 0xb3, 0x85, 0xb6, 0x20,
	0xcf, 0x9f, 0xe2, 0xe8, 0x75, 0x10, 0xd3, 0x79, 0x0f, 0xcf, 0x38, 0x9e, 0x9b, 0xfe, 0xc8, 0x45,
	0xad, 0x18, 0x9e, 0x97, 0xb9, 0x83, 0x91, 0x8b, 0x71, 0x89, 0xe0, 0x17, 0xa8, 0x95, 0xb6, 0xb2,
	0x6d, 0x65, 0x2c, 0x79, 0xc9, 0x2f, 0x90, 0x6d, 0x42, 0x14, 0x9a, 0x36, 0xf7, 0x34, 0xa0, 0x26,
	0x10, 0xa6, 0x76, 0xb9, 0xc7, 0x3a, 0xb0, 0x14, 0x09, 0x86, 0x6e, 0xcf, 0xb1, 0x6c, 0x79, 0xab,
	0x65, 0x12, 0x36, 0xc2, 0xd2, 0x21, 0x55, 0xe8, 0x96, 0xef, 0x01, 0x8b, 0xf4, 0x5d, 0x4b, 0x74,
	0xcd, 0x33, 0xab, 0x37, 0x44, 0xad, 0x42, 0xf2, 0x7a, 0x58, 0x79, 0x6e, 0x89, 0xee, 0xab, 0x20,
	0x7f, 0xfd, 0x0b, 0xd0, 0x2d, 0x54, 0x63, 0xbf, 0x00, 0xdd, 0xc0, 0xb8, 0x4c, 0xe3, 0xd7, 0x68,
	0x7c, 0x59, 0xa6, 0xe1, 0xd7, 0x41, 0x06, 0x34, 0xfa, 0xa2, 0xfc, 0x7e, 0x28, 0x11, 0x0c, 0xfe,
	0x3f, 0x34, 0x64, 0x31, 0x3e, 0x76, 0x9d, 0x44, 0x8b, 0x54, 0x88, 0x0d, 0xdd, 0x86, 0xba, 0xd4,
	0xc6, 0x46, 0x6e, 0x90, 0xb4, 0x46, 0xf9, 0xf1, 0xc0, 0x7a, 0x1f, 0xca, 0xe4, 0x2c, 0xe1, 0x3a,
	0x03, 0x81, 0x6c, 0x19, 0xf2, 0xe8, 0x79, 0x03, 0x87, 0x8c, 0xa5, 0x18, 0x32, 0x60, 0xab, 0x50,
	0x40, 0xcf, 0xeb, 0x8b, 0x93, 0xd0, 0x53, 0x61, 0xc4, 0xee, 0x83, 0x6a, 0x5b, 0xbe, 0x45, 0x46,
	0x2a, 0x6f, 0xff, 0xdb, 0x19, 0x3b, 0xb6, 0xf3, 0x2c, 0xf8, 0x14, 0x75, 0xdd, 0x1f, 0xbc, 0x75,
	0x0c, 0x52, 0xea, 0x9b, 0x50, 0xdd, 0xc5, 0x1e, 0xfa, 0x18, 0x79, 0xb9, 0x06, 0xb9, 0xd0, 0xc6,
	0xaa, 0x91, 0xe3, 0xb6, 0x6e, 0x40, 0x2d, 0x12, 0xfc, 0xd4, 0x48, 0x2c, 0x36, 0x52, 0x31, 0xbc,
	0xe8, 0x37, 0x15, 0xaa, 0x87, 0x6e, 0x60, 0xca, 0x1f, 0x5c, 0x35, 0x4e, 0x54, 0x6e, 0x06, 0x51,
	0x4a, 0x1a, 0x51, 0x6a, 0x1a, 0x51, 0xf9, 0x59, 0x44, 0x15, 0x52, 0x88, 0x5a, 0x48, 0x21, 0xaa,
	0x98, 0x42, 0x54, 0x29, 0x9d, 0x28, 0x48, 0x25, 0xaa, 0x3c, 0x2f, 0x51, 0x95, 0xdb, 0x11, 0x55,
	0x9d, 0x8b, 0xa8, 0xda, 0x6c, 0xa2, 0x16, 0x67, 0x12, 0x55, 0x9f, 0x87, 0xa8, 0xc6, 0xfc, 0x44,
	0xb1, 0xa9, 0x44, 0x19, 0x50, 0x8b, 0xcc, 0xf6, 0xdb, 0x1c, 0xfc, 0x10, 0x60, 0x0f, 0xfd, 0xdb,
	0xba, 0x37, 0x80, 0x9b, 0x8e, 0xfd, 0x25, 0xb8, 0x2f, 0x55, 0xba, 0x9e, 0x88, 0xe6, 0xac, 0x83,
	0xc2, 0x6d, 0xa1, 0x65, 0xb7, 0x94, 0xb6, 0x6a, 0x04, 0x1f, 0xef, 0x38, 0x9b, 0xc1, 0xd9, 0x6d,
	0x17, 0x53, 0x12, 0x8c, 0xca, 0x6c, 0x30, 0xaa, 0x93, 0x60, 0x4c, 0xf5, 0x7e, 0x6d, 0xba, 0xf7,
	0xd7, 0xa1, 0xc4, 0x85, 0x69, 0xd3, 0x63, 0x99, 0x10, 0x53, 0x8d, 0x22, 0x17, 0xf2, 0x31, 0x1d,
	0x3c, 0x1e, 0x8e, 0x3d, 0xb4, 0x7c, 0x34, 0x7d, 0x3e, 0x5e, 0x48, 0x20, 0x53, 0x07, 0xbc, 0x4f,
	0x82, 0x21, 0xf1, 0x20, 0x05, 0x92, 0x2f, 0x90, 0xa9, 0x40, 0xa0, 0x0f, 0xa0, 0x22, 0x5d, 0xf3,
	0x8b, 0x36, 0x55, 0xe6, 0xb4, 0xe9, 0xc7, 0x3c, 0x34, 0x6e, 0xd4, 0xee, 0x56, 0xc2, 0xdd, 0x4a,
	0xf8, 0x53, 0x2b, 0x21, 0x09, 0xd0, 0xd2, 0x6c, 0x80, 0x96, 0xd3, 0x00, 0x5a, 0x99, 0x04, 0x68,
	0xfb, 0x32, 0x07, 0x79, 0x32, 0x34, 0x7b, 0x04, 0xca, 0x8e, 0x6d, 0xb3, 0x95, 0x18, 0x05, 0xd7,
	0xef, 0x0d, 0xcd, 0xd5, 0xc9, 0xb4, 0xb4, 0xbf, 0x9e, 0x61, 0x4f, 0xa0, 0x10, 0x4e, 0xa3, 0xc5,
	0x34, 0x89, 0x7f, 0x6a, 0xcd, 0x7f, 0xa6, 0x54, 0xe2, 0x0d, 0xe4, 0xd2, 0x4b, 0x34, 0x48, 0xfc,
	0xe9, 0x4a, 0x34, 0x48, 0x6e, 0x48, 0x3d, 0x13, 0x4c, 0xbe, 0x87, 0x7e, 0x62, 0xf2, 0xeb, 0x8d,
	0x97, 0x98, 0x3c, 0xb6, 0xd1, 0xf4, 0x0c, 0x7b, 0x0c, 0x6a, 0xf0, 0xf0, 0x60, 0x13, 0x8a, 0x68,
	0x07, 0x35, 0xd7, 0x6e, 0xe4, 0xa3, 0xa3, 0x4f, 0xd7, 0x3e, 0x5c, 0xb5, 0xb2, 0x9f, 0xae, 0x5a,
	0xd9, 0x2f, 0x57, 0xad, 0xec, 0xfb, 0xaf, 0xad, 0xcc, 0x9b, 0x3c, 0x69, 0x8f, 0x0a, 0xf4, 0x02,
	0xf6, 0xe0, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xa1, 0xe2, 0xbe, 0x8f, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EbookClient is the client API for Ebook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EbookClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Gets(ctx context.Context, in *GetsRequest, opts ...grpc.CallOption) (*GetsResponse, error)
}

type ebookClient struct {
	cc *grpc.ClientConn
}

func NewEbookClient(cc *grpc.ClientConn) EbookClient {
	return &ebookClient{cc}
}

func (c *ebookClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) Gets(ctx context.Context, in *GetsRequest, opts ...grpc.CallOption) (*GetsResponse, error) {
	out := new(GetsResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EbookServer is the server API for Ebook service.
type EbookServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Gets(context.Context, *GetsRequest) (*GetsResponse, error)
}

// UnimplementedEbookServer can be embedded to have forward compatible implementations.
type UnimplementedEbookServer struct {
}

func (*UnimplementedEbookServer) Add(ctx context.Context, req *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedEbookServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedEbookServer) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEbookServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedEbookServer) Gets(ctx context.Context, req *GetsRequest) (*GetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}

func RegisterEbookServer(s *grpc.Server, srv EbookServer) {
	s.RegisterService(&_Ebook_serviceDesc, srv)
}

func _Ebook_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Gets(ctx, req.(*GetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ebook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ebook.api.Ebook",
	HandlerType: (*EbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Ebook_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Ebook_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Ebook_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Ebook_Get_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Ebook_Gets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ebook.proto",
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EbookHashValue) > 0 {
		i -= len(m.EbookHashValue)
		copy(dAtA[i:], m.EbookHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookHashValue)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.EbookUploadName) > 0 {
		i -= len(m.EbookUploadName)
		copy(dAtA[i:], m.EbookUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookUploadName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EbookDir) > 0 {
		i -= len(m.EbookDir)
		copy(dAtA[i:], m.EbookDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookDir)))
		i--
		dAtA[i] = 0x7a
	}
	if m.EbookSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.EbookSize))
		i--
		dAtA[i] = 0x70
	}
	if len(m.EbookType) > 0 {
		i -= len(m.EbookType)
		copy(dAtA[i:], m.EbookType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookType)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PreviewHashValue) > 0 {
		i -= len(m.PreviewHashValue)
		copy(dAtA[i:], m.PreviewHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewHashValue)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PreviewUploadName) > 0 {
		i -= len(m.PreviewUploadName)
		copy(dAtA[i:], m.PreviewUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewUploadName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PreviewDir) > 0 {
		i -= len(m.PreviewDir)
		copy(dAtA[i:], m.PreviewDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewDir)))
		i--
		dAtA[i] = 0x52
	}
	if m.PreviewSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.PreviewSize))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PreviewType) > 0 {
		i -= len(m.PreviewType)
		copy(dAtA[i:], m.PreviewType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PublishDate) > 0 {
		i -= len(m.PublishDate)
		copy(dAtA[i:], m.PublishDate)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EbookName) > 0 {
		i -= len(m.EbookName)
		copy(dAtA[i:], m.EbookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEbook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Errno != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Errno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data {
		i--
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Errno != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Errno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EbookHashValue) > 0 {
		i -= len(m.EbookHashValue)
		copy(dAtA[i:], m.EbookHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookHashValue)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EbookUploadName) > 0 {
		i -= len(m.EbookUploadName)
		copy(dAtA[i:], m.EbookUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookUploadName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.EbookDir) > 0 {
		i -= len(m.EbookDir)
		copy(dAtA[i:], m.EbookDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookDir)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.EbookSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.EbookSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.EbookType) > 0 {
		i -= len(m.EbookType)
		copy(dAtA[i:], m.EbookType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PreviewHashValue) > 0 {
		i -= len(m.PreviewHashValue)
		copy(dAtA[i:], m.PreviewHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewHashValue)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PreviewUploadName) > 0 {
		i -= len(m.PreviewUploadName)
		copy(dAtA[i:], m.PreviewUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewUploadName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PreviewDir) > 0 {
		i -= len(m.PreviewDir)
		copy(dAtA[i:], m.PreviewDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewDir)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PreviewSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.PreviewSize))
		i--
		dAtA[i] = 0x50
	}
	if len(m.PreviewType) > 0 {
		i -= len(m.PreviewType)
		copy(dAtA[i:], m.PreviewType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublishDate) > 0 {
		i -= len(m.PublishDate)
		copy(dAtA[i:], m.PublishDate)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EbookName) > 0 {
		i -= len(m.EbookName)
		copy(dAtA[i:], m.EbookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data {
		i--
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Errno != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Errno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEbook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Errno != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Errno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.IsDelete != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x78
	}
	if len(m.EbookUploadName) > 0 {
		i -= len(m.EbookUploadName)
		copy(dAtA[i:], m.EbookUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookUploadName)))
		i--
		dAtA[i] = 0x72
	}
	if m.EbookSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.EbookSize))
		i--
		dAtA[i] = 0x68
	}
	if len(m.EbookType) > 0 {
		i -= len(m.EbookType)
		copy(dAtA[i:], m.EbookType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PreviewUploadName) > 0 {
		i -= len(m.PreviewUploadName)
		copy(dAtA[i:], m.PreviewUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewUploadName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PreviewSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.PreviewSize))
		i--
		dAtA[i] = 0x50
	}
	if len(m.PreviewType) > 0 {
		i -= len(m.PreviewType)
		copy(dAtA[i:], m.PreviewType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublishDate) > 0 {
		i -= len(m.PublishDate)
		copy(dAtA[i:], m.PublishDate)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EbookName) > 0 {
		i -= len(m.EbookName)
		copy(dAtA[i:], m.EbookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEbook(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Errno != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Errno))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EbookResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EbookResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EbookResponseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.IsDelete != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.EbookHashValue) > 0 {
		i -= len(m.EbookHashValue)
		copy(dAtA[i:], m.EbookHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookHashValue)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EbookUploadName) > 0 {
		i -= len(m.EbookUploadName)
		copy(dAtA[i:], m.EbookUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookUploadName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.EbookDir) > 0 {
		i -= len(m.EbookDir)
		copy(dAtA[i:], m.EbookDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookDir)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.EbookSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.EbookSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.EbookType) > 0 {
		i -= len(m.EbookType)
		copy(dAtA[i:], m.EbookType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PreviewHashValue) > 0 {
		i -= len(m.PreviewHashValue)
		copy(dAtA[i:], m.PreviewHashValue)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewHashValue)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PreviewUploadName) > 0 {
		i -= len(m.PreviewUploadName)
		copy(dAtA[i:], m.PreviewUploadName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewUploadName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PreviewDir) > 0 {
		i -= len(m.PreviewDir)
		copy(dAtA[i:], m.PreviewDir)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewDir)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PreviewSize != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.PreviewSize))
		i--
		dAtA[i] = 0x50
	}
	if len(m.PreviewType) > 0 {
		i -= len(m.PreviewType)
		copy(dAtA[i:], m.PreviewType)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PreviewType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublishDate) > 0 {
		i -= len(m.PublishDate)
		copy(dAtA[i:], m.PublishDate)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EbookName) > 0 {
		i -= len(m.EbookName)
		copy(dAtA[i:], m.EbookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EbookName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEbook(dAtA []byte, offset int, v uint64) int {
	offset -= sovEbook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PublishDate)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.PreviewSize != 0 {
		n += 1 + sovEbook(uint64(m.PreviewSize))
	}
	l = len(m.PreviewDir)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewUploadName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewHashValue)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.EbookSize != 0 {
		n += 1 + sovEbook(uint64(m.EbookSize))
	}
	l = len(m.EbookDir)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookUploadName)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookHashValue)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovEbook(uint64(m.Errno))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEbook(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovEbook(uint64(m.Errno))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEbook(uint64(m.Id))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PublishDate)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.PreviewSize != 0 {
		n += 1 + sovEbook(uint64(m.PreviewSize))
	}
	l = len(m.PreviewDir)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewUploadName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewHashValue)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.EbookSize != 0 {
		n += 1 + sovEbook(uint64(m.EbookSize))
	}
	l = len(m.EbookDir)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookUploadName)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookHashValue)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovEbook(uint64(m.Errno))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEbook(uint64(m.Id))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovEbook(uint64(m.Errno))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovEbook(uint64(e))
		}
		n += 1 + sovEbook(uint64(l)) + l
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PublishDate)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.PreviewSize != 0 {
		n += 1 + sovEbook(uint64(m.PreviewSize))
	}
	l = len(m.PreviewUploadName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.EbookSize != 0 {
		n += 1 + sovEbook(uint64(m.EbookSize))
	}
	l = len(m.EbookUploadName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.IsDelete != 0 {
		n += 1 + sovEbook(uint64(m.IsDelete))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errno != 0 {
		n += 1 + sovEbook(uint64(m.Errno))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EbookResponseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEbook(uint64(m.Id))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PublishDate)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.PreviewSize != 0 {
		n += 1 + sovEbook(uint64(m.PreviewSize))
	}
	l = len(m.PreviewDir)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewUploadName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.PreviewHashValue)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookType)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.EbookSize != 0 {
		n += 1 + sovEbook(uint64(m.EbookSize))
	}
	l = len(m.EbookDir)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookUploadName)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.EbookHashValue)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	if m.IsDelete != 0 {
		n += 2 + sovEbook(uint64(m.IsDelete))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 2 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEbook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEbook(x uint64) (n int) {
	return sovEbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewSize", wireType)
			}
			m.PreviewSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviewSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookSize", wireType)
			}
			m.EbookSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbookSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &EbookResponseInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewSize", wireType)
			}
			m.PreviewSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviewSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookSize", wireType)
			}
			m.EbookSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbookSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &EbookResponseInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEbook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEbook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEbook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewSize", wireType)
			}
			m.PreviewSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviewSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookSize", wireType)
			}
			m.EbookSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbookSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errno", wireType)
			}
			m.Errno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errno |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &EbookResponseInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EbookResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EbookResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EbookResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewSize", wireType)
			}
			m.PreviewSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviewSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookSize", wireType)
			}
			m.EbookSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EbookSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookUploadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookUploadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbookHashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbookHashValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEbook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEbook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEbook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEbook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEbook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEbook = fmt.Errorf("proto: unexpected end of group")
)
