// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ebook.proto

package ebook

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddRequest struct {
	BookName             string   `protobuf:"bytes,1,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,2,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,3,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             int32    `protobuf:"varint,4,opt,name=category,proto3" json:"category,omitempty"`
	PublishTime          string   `protobuf:"bytes,5,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	KeyWords             string   `protobuf:"bytes,6,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	File                 []byte   `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{0}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(m, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetBookName() string {
	if m != nil {
		return m.BookName
	}
	return ""
}

func (m *AddRequest) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *AddRequest) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *AddRequest) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *AddRequest) GetPublishTime() string {
	if m != nil {
		return m.PublishTime
	}
	return ""
}

func (m *AddRequest) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *AddRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type AddResponse struct {
	Error                int64    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddResponse) Reset()         { *m = AddResponse{} }
func (m *AddResponse) String() string { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()    {}
func (*AddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{1}
}
func (m *AddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResponse.Merge(m, src)
}
func (m *AddResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddResponse proto.InternalMessageInfo

func (m *AddResponse) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *AddResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *AddResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type DeleteRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{2}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

type DeleteResponse struct {
	Error                int64    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{3}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *DeleteResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DeleteResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type UpdateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{4}
}
func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

type UpdateResponse struct {
	Error                int64    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Errmsg               string   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{5}
}
func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *UpdateResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UpdateResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type GetEbookRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BookName             string   `protobuf:"bytes,2,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,3,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,4,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             int32    `protobuf:"varint,5,opt,name=category,proto3" json:"category,omitempty"`
	PublishTime          string   `protobuf:"bytes,6,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	KeyWords             string   `protobuf:"bytes,7,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	CreateTime           string   `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           string   `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEbookRequest) Reset()         { *m = GetEbookRequest{} }
func (m *GetEbookRequest) String() string { return proto.CompactTextString(m) }
func (*GetEbookRequest) ProtoMessage()    {}
func (*GetEbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{6}
}
func (m *GetEbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEbookRequest.Merge(m, src)
}
func (m *GetEbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEbookRequest proto.InternalMessageInfo

func (m *GetEbookRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetEbookRequest) GetBookName() string {
	if m != nil {
		return m.BookName
	}
	return ""
}

func (m *GetEbookRequest) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *GetEbookRequest) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *GetEbookRequest) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *GetEbookRequest) GetPublishTime() string {
	if m != nil {
		return m.PublishTime
	}
	return ""
}

func (m *GetEbookRequest) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *GetEbookRequest) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *GetEbookRequest) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type GetEbookResponse struct {
	Error                int64     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Errmsg               string    `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 *BookInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetEbookResponse) Reset()         { *m = GetEbookResponse{} }
func (m *GetEbookResponse) String() string { return proto.CompactTextString(m) }
func (*GetEbookResponse) ProtoMessage()    {}
func (*GetEbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{7}
}
func (m *GetEbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEbookResponse.Merge(m, src)
}
func (m *GetEbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEbookResponse proto.InternalMessageInfo

func (m *GetEbookResponse) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *GetEbookResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetEbookResponse) GetData() *BookInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetEbooksRequest struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	BookName             []string `protobuf:"bytes,2,rep,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
	EnglishName          []string `protobuf:"bytes,3,rep,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            []string `protobuf:"bytes,4,rep,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             []int32  `protobuf:"varint,5,rep,packed,name=category,proto3" json:"category,omitempty"`
	PublishTime          []string `protobuf:"bytes,6,rep,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	KeyWords             []string `protobuf:"bytes,7,rep,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	CreateTime           []string `protobuf:"bytes,8,rep,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           []string `protobuf:"bytes,9,rep,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEbooksRequest) Reset()         { *m = GetEbooksRequest{} }
func (m *GetEbooksRequest) String() string { return proto.CompactTextString(m) }
func (*GetEbooksRequest) ProtoMessage()    {}
func (*GetEbooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{8}
}
func (m *GetEbooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEbooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEbooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEbooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEbooksRequest.Merge(m, src)
}
func (m *GetEbooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEbooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEbooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEbooksRequest proto.InternalMessageInfo

func (m *GetEbooksRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetEbooksRequest) GetBookName() []string {
	if m != nil {
		return m.BookName
	}
	return nil
}

func (m *GetEbooksRequest) GetEnglishName() []string {
	if m != nil {
		return m.EnglishName
	}
	return nil
}

func (m *GetEbooksRequest) GetAliasName() []string {
	if m != nil {
		return m.AliasName
	}
	return nil
}

func (m *GetEbooksRequest) GetCategory() []int32 {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *GetEbooksRequest) GetPublishTime() []string {
	if m != nil {
		return m.PublishTime
	}
	return nil
}

func (m *GetEbooksRequest) GetKeyWords() []string {
	if m != nil {
		return m.KeyWords
	}
	return nil
}

func (m *GetEbooksRequest) GetCreateTime() []string {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *GetEbooksRequest) GetUpdateTime() []string {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type GetEbooksResponse struct {
	Error                int64       `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Errmsg               string      `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data                 []*BookInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetEbooksResponse) Reset()         { *m = GetEbooksResponse{} }
func (m *GetEbooksResponse) String() string { return proto.CompactTextString(m) }
func (*GetEbooksResponse) ProtoMessage()    {}
func (*GetEbooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{9}
}
func (m *GetEbooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEbooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEbooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEbooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEbooksResponse.Merge(m, src)
}
func (m *GetEbooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEbooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEbooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEbooksResponse proto.InternalMessageInfo

func (m *GetEbooksResponse) GetError() int64 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *GetEbooksResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetEbooksResponse) GetData() []*BookInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type BookInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BookName             string   `protobuf:"bytes,2,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
	EnglishName          string   `protobuf:"bytes,3,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	AliasName            string   `protobuf:"bytes,4,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	Category             int32    `protobuf:"varint,5,opt,name=category,proto3" json:"category,omitempty"`
	PublishTime          string   `protobuf:"bytes,6,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	KeyWords             string   `protobuf:"bytes,7,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	CreateTime           string   `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           string   `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookInfo) Reset()         { *m = BookInfo{} }
func (m *BookInfo) String() string { return proto.CompactTextString(m) }
func (*BookInfo) ProtoMessage()    {}
func (*BookInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_790c7c483a0ad50b, []int{10}
}
func (m *BookInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookInfo.Merge(m, src)
}
func (m *BookInfo) XXX_Size() int {
	return m.Size()
}
func (m *BookInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BookInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BookInfo proto.InternalMessageInfo

func (m *BookInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BookInfo) GetBookName() string {
	if m != nil {
		return m.BookName
	}
	return ""
}

func (m *BookInfo) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *BookInfo) GetAliasName() string {
	if m != nil {
		return m.AliasName
	}
	return ""
}

func (m *BookInfo) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *BookInfo) GetPublishTime() string {
	if m != nil {
		return m.PublishTime
	}
	return ""
}

func (m *BookInfo) GetKeyWords() string {
	if m != nil {
		return m.KeyWords
	}
	return ""
}

func (m *BookInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *BookInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "ebook.api.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "ebook.api.AddResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ebook.api.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "ebook.api.DeleteResponse")
	proto.RegisterType((*UpdateRequest)(nil), "ebook.api.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "ebook.api.UpdateResponse")
	proto.RegisterType((*GetEbookRequest)(nil), "ebook.api.GetEbookRequest")
	proto.RegisterType((*GetEbookResponse)(nil), "ebook.api.GetEbookResponse")
	proto.RegisterType((*GetEbooksRequest)(nil), "ebook.api.GetEbooksRequest")
	proto.RegisterType((*GetEbooksResponse)(nil), "ebook.api.GetEbooksResponse")
	proto.RegisterType((*BookInfo)(nil), "ebook.api.BookInfo")
}

func init() { proto.RegisterFile("ebook.proto", fileDescriptor_790c7c483a0ad50b) }

var fileDescriptor_790c7c483a0ad50b = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x96, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x39, 0x5f, 0x93, 0xc6, 0xcf, 0xfd, 0xc5, 0x41, 0x8b, 0x71, 0x21, 0x2d, 0x5e, 0x88,
	0x3a, 0x34, 0x52, 0xd9, 0xba, 0xb5, 0x02, 0x21, 0x06, 0x40, 0xb2, 0x40, 0x95, 0x3a, 0x50, 0x5d,
	0x7b, 0x57, 0xf7, 0x48, 0xe2, 0x33, 0xf6, 0x55, 0x28, 0x2b, 0xff, 0x02, 0x03, 0x4c, 0xf0, 0xcf,
	0x30, 0x30, 0x22, 0x31, 0xb2, 0xa0, 0xc2, 0x1f, 0x82, 0x7c, 0x67, 0x27, 0x76, 0x08, 0xb1, 0x04,
	0xdd, 0xd8, 0x7c, 0xdf, 0xf7, 0xee, 0x73, 0xbe, 0xf7, 0x7d, 0x7e, 0x09, 0x38, 0xfc, 0x58, 0xca,
	0xde, 0x76, 0x9c, 0x48, 0x25, 0x89, 0x6d, 0x16, 0x34, 0x16, 0x5e, 0x47, 0x9d, 0x89, 0x84, 0x1d,
	0xc5, 0x34, 0x51, 0xc3, 0x6e, 0x28, 0x65, 0xd8, 0xe7, 0x5d, 0x1a, 0x8b, 0x2e, 0x8d, 0x22, 0xa9,
	0xa8, 0x12, 0x32, 0x4a, 0xcd, 0x26, 0xff, 0x1b, 0x02, 0xd8, 0x63, 0x2c, 0xe0, 0xaf, 0xce, 0x79,
	0xaa, 0xc8, 0x3a, 0xd8, 0x19, 0xe4, 0x28, 0xa2, 0x03, 0xee, 0xa2, 0x4d, 0xd4, 0xb1, 0x83, 0x56,
	0x26, 0x3c, 0xa1, 0x03, 0x4e, 0xee, 0xc0, 0x02, 0x8f, 0xc2, 0xbe, 0x48, 0xcf, 0x4c, 0xdc, 0xd2,
	0x71, 0x27, 0xd7, 0x74, 0xca, 0x6d, 0x00, 0xda, 0x17, 0x34, 0x35, 0x09, 0x58, 0x27, 0xd8, 0x5a,
	0xd1, 0x61, 0x0f, 0x5a, 0x27, 0x54, 0xf1, 0x50, 0x26, 0x43, 0x77, 0x6e, 0x13, 0x75, 0x1a, 0xc1,
	0x68, 0x9d, 0xd1, 0xe3, 0xf3, 0x63, 0x4d, 0x57, 0x62, 0xc0, 0xdd, 0x86, 0xa1, 0xe7, 0xda, 0x33,
	0x31, 0xe0, 0xd9, 0xdb, 0xf5, 0xf8, 0xf0, 0xe8, 0xb5, 0x4c, 0x58, 0xea, 0x36, 0xcd, 0xdb, 0xf5,
	0xf8, 0xf0, 0x20, 0x5b, 0x13, 0x02, 0x73, 0xa7, 0xa2, 0xcf, 0xdd, 0xf9, 0x4d, 0xd4, 0x59, 0x08,
	0xf4, 0xb3, 0xff, 0x14, 0x1c, 0x7d, 0xb9, 0x34, 0x96, 0x51, 0xca, 0xc9, 0x75, 0x68, 0xf0, 0x24,
	0x91, 0x89, 0xbe, 0x19, 0x0e, 0xcc, 0x82, 0xac, 0x41, 0x93, 0x27, 0xc9, 0x20, 0x0d, 0xf3, 0x0b,
	0xe5, 0xab, 0x0c, 0xc8, 0xa8, 0xa2, 0xfa, 0x16, 0xad, 0x40, 0x3f, 0xfb, 0xcb, 0xb0, 0x78, 0x9f,
	0xf7, 0xb9, 0xe2, 0x79, 0xc1, 0xfc, 0x00, 0x96, 0x0a, 0xe1, 0x32, 0x0f, 0x79, 0x1e, 0x33, 0x5a,
	0x39, 0xa4, 0x10, 0x2e, 0xed, 0x90, 0x0f, 0x16, 0x2c, 0x3f, 0xe4, 0xea, 0x41, 0xe6, 0x6e, 0xe1,
	0xfe, 0x12, 0x58, 0x82, 0xe5, 0xb6, 0x5b, 0x82, 0x55, 0xbb, 0xc1, 0xaa, 0xe9, 0x06, 0x5c, 0xd7,
	0x0d, 0x73, 0xb3, 0xba, 0xa1, 0x51, 0xd3, 0x0d, 0xcd, 0x9a, 0x6e, 0x98, 0x9f, 0xe8, 0x86, 0x0d,
	0x70, 0x4e, 0x12, 0x4e, 0x15, 0x37, 0xdb, 0x5b, 0x3a, 0x0c, 0x46, 0xd2, 0xbb, 0x37, 0xc0, 0x39,
	0xd7, 0x35, 0x35, 0x09, 0xb6, 0x49, 0x30, 0x52, 0x96, 0xe0, 0x0b, 0x58, 0x19, 0xd7, 0xe7, 0xaf,
	0xca, 0x7e, 0xb7, 0x54, 0x76, 0x67, 0xe7, 0xda, 0xf6, 0xe8, 0xfb, 0xdc, 0xde, 0x97, 0xb2, 0xf7,
	0x28, 0x3a, 0x95, 0xb9, 0x17, 0x1f, 0xad, 0xf1, 0x59, 0xe9, 0xa4, 0x19, 0x78, 0xba, 0x19, 0xb8,
	0xc6, 0x0c, 0x5c, 0x67, 0x06, 0x9e, 0x65, 0x06, 0xae, 0x31, 0x03, 0xd7, 0x98, 0x81, 0x67, 0x9b,
	0x81, 0xeb, 0xcc, 0xc0, 0x13, 0x66, 0xbc, 0x84, 0xab, 0xa5, 0x02, 0xfd, 0xa3, 0x1b, 0x78, 0xb6,
	0x1b, 0xef, 0x2c, 0x68, 0x15, 0x52, 0xe9, 0x93, 0xc0, 0xff, 0xfd, 0x27, 0xb1, 0xf3, 0x09, 0x43,
	0x43, 0x7b, 0x40, 0x1e, 0x03, 0xde, 0x63, 0x8c, 0xac, 0x96, 0xaa, 0x38, 0xfe, 0x15, 0xf1, 0xd6,
	0x26, 0x65, 0x63, 0x98, 0xbf, 0xfa, 0xe6, 0xeb, 0xcf, 0xb7, 0xd6, 0xb2, 0x0f, 0x5d, 0x1d, 0xef,
	0x52, 0xc6, 0x76, 0xd1, 0x56, 0x07, 0x91, 0x03, 0x68, 0x9a, 0x29, 0x4a, 0xdc, 0xd2, 0xd6, 0xca,
	0xa4, 0xf5, 0x6e, 0x4e, 0x89, 0xe4, 0x5c, 0x57, 0x73, 0x89, 0xbf, 0x98, 0x73, 0x99, 0x0e, 0xef,
	0xa2, 0xad, 0x0c, 0x6c, 0x26, 0x67, 0x05, 0x5c, 0x99, 0xae, 0x15, 0x70, 0x75, 0xcc, 0xfe, 0x06,
	0x36, 0xb5, 0xc8, 0xc0, 0x87, 0xd0, 0x2a, 0x1a, 0x92, 0x78, 0x25, 0xc0, 0xc4, 0x48, 0xf5, 0xd6,
	0xa7, 0xc6, 0xfe, 0x50, 0x8f, 0x90, 0xab, 0x8c, 0xfd, 0x02, 0xec, 0x51, 0xb3, 0x93, 0x69, 0x80,
	0x62, 0x46, 0x78, 0xb7, 0xa6, 0x07, 0x73, 0xfc, 0x9a, 0xc6, 0xaf, 0xf8, 0xce, 0x18, 0x9f, 0xee,
	0xa2, 0xad, 0xfd, 0x1b, 0x9f, 0x2f, 0xda, 0xe8, 0xcb, 0x45, 0x1b, 0x7d, 0xbf, 0x68, 0xa3, 0xf7,
	0x3f, 0xda, 0x57, 0x0e, 0x1b, 0x3a, 0xe1, 0xb8, 0xa9, 0xff, 0x13, 0xdc, 0xfb, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x1d, 0xca, 0xb5, 0x57, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EbookClient is the client API for Ebook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EbookClient interface {
	Add(ctx context.Context, opts ...grpc.CallOption) (Ebook_AddClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetEbook(ctx context.Context, in *GetEbookRequest, opts ...grpc.CallOption) (*GetEbookResponse, error)
	GetEbooks(ctx context.Context, in *GetEbooksRequest, opts ...grpc.CallOption) (*GetEbooksResponse, error)
}

type ebookClient struct {
	cc *grpc.ClientConn
}

func NewEbookClient(cc *grpc.ClientConn) EbookClient {
	return &ebookClient{cc}
}

func (c *ebookClient) Add(ctx context.Context, opts ...grpc.CallOption) (Ebook_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ebook_serviceDesc.Streams[0], "/ebook.api.Ebook/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &ebookAddClient{stream}
	return x, nil
}

type Ebook_AddClient interface {
	Send(*AddRequest) error
	CloseAndRecv() (*AddResponse, error)
	grpc.ClientStream
}

type ebookAddClient struct {
	grpc.ClientStream
}

func (x *ebookAddClient) Send(m *AddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ebookAddClient) CloseAndRecv() (*AddResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ebookClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) GetEbook(ctx context.Context, in *GetEbookRequest, opts ...grpc.CallOption) (*GetEbookResponse, error) {
	out := new(GetEbookResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/GetEbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ebookClient) GetEbooks(ctx context.Context, in *GetEbooksRequest, opts ...grpc.CallOption) (*GetEbooksResponse, error) {
	out := new(GetEbooksResponse)
	err := c.cc.Invoke(ctx, "/ebook.api.Ebook/GetEbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EbookServer is the server API for Ebook service.
type EbookServer interface {
	Add(Ebook_AddServer) error
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	GetEbook(context.Context, *GetEbookRequest) (*GetEbookResponse, error)
	GetEbooks(context.Context, *GetEbooksRequest) (*GetEbooksResponse, error)
}

// UnimplementedEbookServer can be embedded to have forward compatible implementations.
type UnimplementedEbookServer struct {
}

func (*UnimplementedEbookServer) Add(srv Ebook_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedEbookServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedEbookServer) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEbookServer) GetEbook(ctx context.Context, req *GetEbookRequest) (*GetEbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEbook not implemented")
}
func (*UnimplementedEbookServer) GetEbooks(ctx context.Context, req *GetEbooksRequest) (*GetEbooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEbooks not implemented")
}

func RegisterEbookServer(s *grpc.Server, srv EbookServer) {
	s.RegisterService(&_Ebook_serviceDesc, srv)
}

func _Ebook_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EbookServer).Add(&ebookAddServer{stream})
}

type Ebook_AddServer interface {
	SendAndClose(*AddResponse) error
	Recv() (*AddRequest, error)
	grpc.ServerStream
}

type ebookAddServer struct {
	grpc.ServerStream
}

func (x *ebookAddServer) SendAndClose(m *AddResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ebookAddServer) Recv() (*AddRequest, error) {
	m := new(AddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ebook_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_GetEbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).GetEbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/GetEbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).GetEbook(ctx, req.(*GetEbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ebook_GetEbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEbooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EbookServer).GetEbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ebook.api.Ebook/GetEbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EbookServer).GetEbooks(ctx, req.(*GetEbooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ebook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ebook.api.Ebook",
	HandlerType: (*EbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Ebook_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Ebook_Update_Handler,
		},
		{
			MethodName: "GetEbook",
			Handler:    _Ebook_GetEbook_Handler,
		},
		{
			MethodName: "GetEbooks",
			Handler:    _Ebook_GetEbooks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _Ebook_Add_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ebook.proto",
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PublishTime) > 0 {
		i -= len(m.PublishTime)
		copy(dAtA[i:], m.PublishTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Category != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookName) > 0 {
		i -= len(m.BookName)
		copy(dAtA[i:], m.BookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.BookName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data {
		i--
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data {
		i--
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data {
		i--
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PublishTime) > 0 {
		i -= len(m.PublishTime)
		copy(dAtA[i:], m.PublishTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.Category != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BookName) > 0 {
		i -= len(m.BookName)
		copy(dAtA[i:], m.BookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.BookName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEbook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEbooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEbooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEbooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateTime) > 0 {
		for iNdEx := len(m.UpdateTime) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdateTime[iNdEx])
			copy(dAtA[i:], m.UpdateTime[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.UpdateTime[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CreateTime) > 0 {
		for iNdEx := len(m.CreateTime) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateTime[iNdEx])
			copy(dAtA[i:], m.CreateTime[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.CreateTime[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.KeyWords) > 0 {
		for iNdEx := len(m.KeyWords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyWords[iNdEx])
			copy(dAtA[i:], m.KeyWords[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PublishTime) > 0 {
		for iNdEx := len(m.PublishTime) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublishTime[iNdEx])
			copy(dAtA[i:], m.PublishTime[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishTime[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Category) > 0 {
		dAtA3 := make([]byte, len(m.Category)*10)
		var j2 int
		for _, num1 := range m.Category {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintEbook(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AliasName) > 0 {
		for iNdEx := len(m.AliasName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AliasName[iNdEx])
			copy(dAtA[i:], m.AliasName[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EnglishName) > 0 {
		for iNdEx := len(m.EnglishName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnglishName[iNdEx])
			copy(dAtA[i:], m.EnglishName[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BookName) > 0 {
		for iNdEx := len(m.BookName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BookName[iNdEx])
			copy(dAtA[i:], m.BookName[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.BookName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintEbook(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetEbooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEbooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEbooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEbook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Errmsg) > 0 {
		i -= len(m.Errmsg)
		copy(dAtA[i:], m.Errmsg)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.Errmsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BookInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyWords) > 0 {
		i -= len(m.KeyWords)
		copy(dAtA[i:], m.KeyWords)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.KeyWords)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PublishTime) > 0 {
		i -= len(m.PublishTime)
		copy(dAtA[i:], m.PublishTime)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.PublishTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.Category != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AliasName) > 0 {
		i -= len(m.AliasName)
		copy(dAtA[i:], m.AliasName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.AliasName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BookName) > 0 {
		i -= len(m.BookName)
		copy(dAtA[i:], m.BookName)
		i = encodeVarintEbook(dAtA, i, uint64(len(m.BookName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEbook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEbook(dAtA []byte, offset int, v uint64) int {
	offset -= sovEbook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovEbook(uint64(m.Category))
	}
	l = len(m.PublishTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbook(uint64(m.Error))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbook(uint64(m.Error))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbook(uint64(m.Error))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.BookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovEbook(uint64(m.Category))
	}
	l = len(m.PublishTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbook(uint64(m.Error))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEbooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.BookName) > 0 {
		for _, s := range m.BookName {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.EnglishName) > 0 {
		for _, s := range m.EnglishName {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.AliasName) > 0 {
		for _, s := range m.AliasName {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.Category) > 0 {
		l = 0
		for _, e := range m.Category {
			l += sovEbook(uint64(e))
		}
		n += 1 + sovEbook(uint64(l)) + l
	}
	if len(m.PublishTime) > 0 {
		for _, s := range m.PublishTime {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.KeyWords) > 0 {
		for _, s := range m.KeyWords {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.CreateTime) > 0 {
		for _, s := range m.CreateTime {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if len(m.UpdateTime) > 0 {
		for _, s := range m.UpdateTime {
			l = len(s)
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEbooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovEbook(uint64(m.Error))
	}
	l = len(m.Errmsg)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEbook(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BookInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEbook(uint64(m.Id))
	}
	l = len(m.BookName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.AliasName)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovEbook(uint64(m.Category))
	}
	l = len(m.PublishTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.KeyWords)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 1 + l + sovEbook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEbook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEbook(x uint64) (n int) {
	return sovEbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BookInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEbooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEbooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEbooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookName = append(m.BookName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = append(m.EnglishName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = append(m.AliasName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Category = append(m.Category, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEbook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEbook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Category) == 0 {
					m.Category = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEbook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Category = append(m.Category, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishTime = append(m.PublishTime, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = append(m.KeyWords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = append(m.CreateTime, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = append(m.UpdateTime, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEbooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEbooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEbooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BookInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyWords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEbook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEbook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEbook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEbook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEbook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEbook = fmt.Errorf("proto: unexpected end of group")
)
